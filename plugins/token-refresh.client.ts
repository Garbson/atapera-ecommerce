// plugins/token-refresh.client.ts
export default defineNuxtPlugin(() => {
  // Inicializar sistema de renova√ß√£o de token apenas no client
  if (process.client) {
    // Evitar inicializa√ß√£o m√∫ltipla do plugin em HMR/navega√ß√µes
    if ((window as any).__tokenRefreshPluginInitialized) {
      return;
    }
    (window as any).__tokenRefreshPluginInitialized = true;

    const { session } = useAuth();
    const { startPeriodicCheck, isTokenExpiringSoon, refreshToken } =
      useTokenRefresh();

    // Verificar token imediatamente se usu√°rio j√° est√° logado
    if (session.value) {
      console.log("üîê Token Refresh Plugin: Usu√°rio logado detectado");

      // Se token est√° pr√≥ximo de expirar, renovar imediatamente
      if (isTokenExpiringSoon(session.value as any)) {
        console.log("‚è∞ Token expirando em breve, renovando...");
        refreshToken();
      }

      // Iniciar verifica√ß√£o peri√≥dica
      startPeriodicCheck();
    }

    // Listener para mudan√ßas de foco da janela (renovar se necess√°rio)
    const handleVisibilityChange = () => {
      if (
        !document.hidden &&
        session.value &&
        isTokenExpiringSoon(session.value as any)
      ) {
        console.log("üëÅÔ∏è Usu√°rio voltou para a aba, verificando token...");
        refreshToken();
      }
    };

    document.addEventListener("visibilitychange", handleVisibilityChange);

    // Cleanup seguro no descarregamento da janela (n√£o usar onBeforeUnmount em plugin)
    const handleBeforeUnload = () => {
      document.removeEventListener("visibilitychange", handleVisibilityChange);
    };
    window.addEventListener("beforeunload", handleBeforeUnload);

    // Nota: como usamos um guard global de inicializa√ß√£o e HMR, evitar m√∫ltiplos listeners j√° est√° coberto

    console.log("‚úÖ Token Refresh Plugin inicializado");
  }
});
