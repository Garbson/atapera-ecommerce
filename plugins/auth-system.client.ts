// plugins/auth-system.client.ts - Sistema unificado de autentica√ß√£o
export default defineNuxtPlugin({
  name: 'auth-system',
  async setup() {
    // S√≥ executa no client-side
    if (typeof window === 'undefined') return;

    // Guard global para evitar m√∫ltiplas inicializa√ß√µes
    if ((globalThis as any).__authSystemInitialized) {
      console.log("üîÑ Sistema de auth j√° inicializado globalmente");
      return;
    }

    console.log("üöÄ Inicializando sistema unificado de autentica√ß√£o...");

    try {
      // Marcar como inicializado ANTES de come√ßar para evitar condi√ß√µes de corrida
      (globalThis as any).__authSystemInitialized = true;

      const { initAuth, checkAndRestoreSession } = useAuth();

      // Inicializar sistema de autentica√ß√£o
      await initAuth();

      // Configurar verifica√ß√£o de sess√£o quando a p√°gina ganha foco
      const handleFocus = async () => {
        console.log("üëÅÔ∏è P√°gina ganhou foco, verificando sess√£o...");
        await checkAndRestoreSession();
      };

      // Listeners de foco da janela para detectar quando usu√°rio volta
      window.addEventListener('focus', handleFocus);
      window.addEventListener('visibilitychange', () => {
        if (!document.hidden) {
          handleFocus();
        }
      });

      // Verifica√ß√£o peri√≥dica MUITO menos agressiva - apenas para casos extremos
      const sessionCheckInterval = setInterval(async () => {
        // S√≥ verificar se a janela est√° ativa E se n√£o h√° sess√£o local
        if (!document.hidden && !session.value) {
          try {
            console.log("üîÑ Verifica√ß√£o peri√≥dica de emerg√™ncia - sem sess√£o local");
            await checkAndRestoreSession();
          } catch (error) {
            console.error("‚ùå Erro na verifica√ß√£o peri√≥dica:", error);
          }
        }
      }, 600000); // 10 minutos (muito menos agressivo)

      // Cleanup adequado seguindo pr√°ticas do Supabase
      const cleanup = () => {
        window.removeEventListener('focus', handleFocus);
        clearInterval(sessionCheckInterval);

        // Unsubscribe do listener de auth seguindo documenta√ß√£o oficial
        const { reinitAuth } = useAuth();
        try {
          reinitAuth(); // Isso vai fazer unsubscribe interno
        } catch (error) {
          console.error("‚ùå Erro no cleanup:", error);
        }
      };

      window.addEventListener('beforeunload', cleanup);

      // Cleanup tamb√©m no pagehide para mobile
      window.addEventListener('pagehide', cleanup);

      // Inicializar debug em desenvolvimento
      if (process.dev) {
        const { debugCommands } = useAuthDebug();
        console.log("üîß Sistema de debug de autentica√ß√£o ativado");
        console.log("Use window.authDebug para comandos de debug");
      }

      console.log("‚úÖ Sistema unificado de autentica√ß√£o inicializado com sucesso");

    } catch (error) {
      console.error("‚ùå Erro ao inicializar sistema de autentica√ß√£o:", error);
      // Em caso de erro, permitir nova tentativa
      (globalThis as any).__authSystemInitialized = false;
    }
  }
});